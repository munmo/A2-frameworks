const request = require('supertest');
const express = require('express');
const { MongoClient, ObjectID } = require('mongodb');
const should = require('chai').should();

describe('Login API', () => {
  let db;
  let app;
  let server;

  before(async function () {
    const uri = 'mongodb://localhost:27017/chat';

    try {
      const client = new MongoClient(uri);
      await client.connect();
      db = client.db();

      app = express();

      app.post('/api/login', async (req, res) => {
        const { email, password } = req.body;

        try {
          // Query MongoDB for the user
          const usersCollection = db.collection('users');
          const user = await usersCollection.findOne({ email });

          if (user && user.pwd === password) {
            res.json({ ok: true, userData: { _id: user._id, username: user.username } });
          } else {
            res.status(401).json({ ok: false, message: 'Authentication failed' });
          }
        } catch (err) {
          console.error('Error:', err);
          res.status(500).json({ message: 'Internal Server Error' });
        }
      });

      server = app.listen(3000); // Start the Express app
    } catch (err) {
      console.error('Error in setup:', err);
    }
  });

  after(async function () {
    try {
      await db.client.close();
      server.close(); // Close the Express app
    } catch (err) {
      console.error('Error in teardown:', err);
    }
  });

  it('should return a 401 status code for invalid credentials', async () => {
    const response = await request(server)
      .post('/api/login')
      .send({ email: 'abc@gmail.com', password: 'wrongpassword' });

    response.should.have.status(401);
    response.body.should.have.property('ok', false);
    response.body.should.have.property('message', 'Authentication failed');
  });

  it('should return a 200 status code and user data for valid credentials', async () => {
    const response = await request(server)
      .post('/api/login')
      .send({ email: 'abc@gmail.com', password: '123' });

    response.should.have.status(200);
    response.body.should.have.property('ok', true);
    response.body.should.have.property('userData');
    response.body.userData.should.have.property('_id').that.is.a('string'); 
    response.body.userData.should.have.property('username').that.is.a('string'); 
  });
});
