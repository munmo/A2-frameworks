const chai = require('chai');
const chaiHttp = require('chai-http');
const { MongoClient } = require('mongodb');
const express = require('express');
chai.use(chaiHttp);

describe('Login API', () => {
  let db;
  let app;
  let server;

  before(async function () {
    const uri = 'mongodb://localhost:27017/chat';

    try {
      const client = new MongoClient(uri);
      await client.connect();
      db = client.db();

      app = express();

      // Define a route handler for '/api/login'
      app.post('/api/login', async (req, res) => {
        // ... Your route handler logic ...
      });

      server = app.listen(3000); // Start the Express app

      this.timeout(30000); // Increase the timeout if needed
    } catch (err) {
      console.error('Error in setup:', err);
    }
  });

  after(async function () {
    try {
      await db.client.close();
      server.close(); // Close the Express app

      this.timeout(30000); // Increase the timeout if needed
    } catch (err) {
      console.error('Error in teardown:', err);
    }
  });

  it('should return a 400 status code if email and password are missing', async () => {
    const response = await chai.request(server).post('/api/login');
    chai.expect(response).to.have.status(400);
    chai.expect(response.body).to.have.property('ok').to.equal(false);
    chai.expect(response.body).to.have.property('message').to.equal('Email and password are required');
  });

  it('should return a 200 status code and user data if login is successful', async () => {
    const response = await chai
      .request(server)
      .post('/api/login')
      .send({ email: 'abc@gmail.com', password: '123' }); // Valid credentials
    chai.expect(response).to.have.status(200);
    chai.expect(response.body).to.have.property('ok').to.equal(true);
    chai.expect(response.body).to.have.property('userData');
  });

  it('should return a 200 status code and { ok: false } if login fails', async () => {
    const response = await chai
      .request(server)
      .post('/api/login')
      .send({ email: 'nonexistent@example.com', password: 'wrongpassword' }); // Invalid credentials
    chai.expect(response).to.have.status(200);
    chai.expect(response.body).to.have.property('ok').to.equal(false);
  });
});
